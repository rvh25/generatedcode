# Include statements - 
include("DataFile.jl")
include("Balances.jl")
using Sundials

# ------------------------------------------------------------------------------------- #
# Copyright (c) 2016 Varnerlab,
# School of Chemical and Biomolecular Engineering,
# Cornell University, Ithaca NY 14853 USA.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# SolveBalanceEquations.jl
# Solve the balance equations using CVODE from the SUNDIALS package.
#
# Generated on: 5/26/2016
# Generated by: rohainehsu
# ------------------------------------------------------------------------------------- #
function SolveBalanceEquations(TSTART,TSTOP,Ts,DF)

	# Do we have a modified data dictionary? - 
	if (length(DF) == 0)
		DFIN = DataFile(TSTART,TSTOP,Ts,-1);
	else
		DFIN = DF;
	end

	# Setup the simulation time scale - 
	TSIM = [TSTART:Ts:TSTOP];

	# Grab the initial conditions from the data dictionary -
	initial_condition_vector = DFIN["INITIAL_CONDITION_VECTOR"];

	# Setup and call the ODE solver - 
	fbalances(t,y,ydot) = Balances(t,y,ydot,DFIN);
	X = Sundials.cvode(fbalances,initial_condition_vector,TSIM);

	return (TSIM,X);
end